name: Django CI/CD Pipeline
on: [push, pull_request]
jobs:
  
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        cd backend
        poetry install

    - name: Cache venv created by poetry (configured to be in '.venv')
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
      

    - name: Run migrations
      env:
        DBENGINE: django.db.backends.sqlite3
        POSTGRES_DB: ":memory:"
      run: |
        cd backend
        source $(poetry env info --path)/bin/activate
        python manage.py migrate

    - name: Run tests
      env:
        DBENGINE: django.db.backends.sqlite3
        POSTGRES_DB: ":memory:"
      run: |
        cd backend
        source $(poetry env info --path)/bin/activate
        python manage.py test

  lint:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Run Flake8
      run: |
        cd backend 
        flake8 .

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Build and push
      run: |
        docker build -f backend/docker/django/Dockerfile -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .
        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
        docker pushrm ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
        
# docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}


  deploy:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Check out code
      uses: actions/checkout@v3

    - name: SSH CONECT
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        EOF

    - name: Copy project files to server
      run: |
        rsync -avz --exclude=redisdata $GITHUB_WORKSPACE/* ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

    - name: Create .env 
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cat << 'EOF' > tracker/backend/.env
          ${{ secrets.ENV }}
        EOF
      shell: bash

    - name: Editer ALLOWED_HOSTS
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd tracker/backend/config
          sed -i 's/ALLOWED_HOSTS = \[\]/ALLOWED_HOSTS = \["${{ secrets.SERVER_IP }}"\]/1' settings.py 
        EOF
      shell: bash


    - name: Install on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd tracker
          sudo docker system prune -af && \
          sudo docker volume prune -f && \
          sudo docker-compose -f docker-compose.yaml down --remove-orphans && \
          sudo docker-compose -f docker-compose.yaml pull && \
          sudo docker-compose -f docker-compose.yaml up -d --build --force-recreate

        EOF

    # - name: Collect static files on server
    #   run: |
    #     ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
    #       cd ${{ secrets.DEPLOY_DIR }}
    #       cd backend
    #       source $(poetry env info --path)/bin/activate
    #       python manage.py collectstatic --noinput
    #     EOF

    # - name: Restart application
    #   run: |
    #     ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
    #       sudo systemctl restart myapp.service
    #     EOF
      