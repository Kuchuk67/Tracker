name: Django CI/CD Pipeline
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        cd backend
        poetry install

    - name: Cache venv created by poetry (configured to be in '.venv')
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: venv-${{ runner.os }}-${{ hashFiles('poetry.lock') }}
      

    - name: Run migrations
      env:
        DBENGINE: django.db.backends.sqlite3
        POSTGRES_DB: ":memory:"
      run: |
        cd backend
        source $(poetry env info --path)/bin/activate
        python manage.py migrate

    - name: Run tests
      env:
        DBENGINE: django.db.backends.sqlite3
        POSTGRES_DB: ":memory:"
      run: |
        cd backend
        source $(poetry env info --path)/bin/activate
        python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.SSH_KEY }}

    - name: Copy project files to server
      run: |
        rsync -avz --exclude '__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/${{ secrets.DEPLOY_DIR }}

    - name: Install dependencies on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          pip install poetry
          cd backend
          source $(poetry env info --path)/bin/activate
          poetry install
        EOF

    - name: Apply migrations on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          cd backend
          source $(poetry env info --path)/bin/activate
          python manage.py migrate
        EOF

    - name: Collect static files on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          cd backend
          source $(poetry env info --path)/bin/activate
          python manage.py collectstatic --noinput
        EOF

    - name: Restart application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          sudo systemctl restart myapp.service
        EOF

